// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: LighthouseState.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "LighthouseState.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Lighthouse {
namespace State {

namespace {

const ::google::protobuf::Descriptor* State_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  State_reflection_ = NULL;
const ::google::protobuf::Descriptor* State_Browser_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  State_Browser_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_LighthouseState_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_LighthouseState_2eproto() {
  protobuf_AddDesc_LighthouseState_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "LighthouseState.proto");
  GOOGLE_CHECK(file != NULL);
  State_descriptor_ = file->message_type(0);
  static const int State_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(State, _first_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(State, _second_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(State, _third_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(State, _fourth_),
  };
  State_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      State_descriptor_,
      State::default_instance_,
      State_offsets_,
      -1,
      -1,
      -1,
      sizeof(State),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(State, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(State, _is_default_instance_));
  State_Browser_descriptor_ = State_descriptor_->nested_type(0);
  static const int State_Browser_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(State_Browser, _listelement_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(State_Browser, _buttonfirststate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(State_Browser, _buttonsecondstate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(State_Browser, _buttonthirdstate_),
  };
  State_Browser_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      State_Browser_descriptor_,
      State_Browser::default_instance_,
      State_Browser_offsets_,
      -1,
      -1,
      -1,
      sizeof(State_Browser),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(State_Browser, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(State_Browser, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_LighthouseState_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      State_descriptor_, &State::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      State_Browser_descriptor_, &State_Browser::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_LighthouseState_2eproto() {
  delete State::default_instance_;
  delete State_reflection_;
  delete State_Browser::default_instance_;
  delete State_Browser_reflection_;
}

void protobuf_AddDesc_LighthouseState_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_LighthouseState_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::Lighthouse::CodeElement::protobuf_AddDesc_LighthouseCodeElement_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\025LighthouseState.proto\022\020Lighthouse.Stat"
    "e\032\033LighthouseCodeElement.proto\"\346\002\n\005State"
    "\022/\n\006_first\030\001 \001(\0132\037.Lighthouse.State.Stat"
    "e.Browser\0220\n\007_second\030\002 \001(\0132\037.Lighthouse."
    "State.State.Browser\022/\n\006_third\030\003 \001(\0132\037.Li"
    "ghthouse.State.State.Browser\0220\n\007_fourth\030"
    "\004 \001(\0132\037.Lighthouse.State.State.Browser\032\226"
    "\001\n\007Browser\0229\n\014_listElement\030\001 \003(\0132#.Light"
    "house.CodeElement.CodeElement\022\031\n\021_button"
    "FirstState\030\002 \001(\010\022\032\n\022_buttonSecondState\030\003"
    " \001(\010\022\031\n\021_buttonThirdState\030\004 \001(\010b\006proto3", 439);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "LighthouseState.proto", &protobuf_RegisterTypes);
  State::default_instance_ = new State();
  State_Browser::default_instance_ = new State_Browser();
  State::default_instance_->InitAsDefaultInstance();
  State_Browser::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_LighthouseState_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_LighthouseState_2eproto {
  StaticDescriptorInitializer_LighthouseState_2eproto() {
    protobuf_AddDesc_LighthouseState_2eproto();
  }
} static_descriptor_initializer_LighthouseState_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int State_Browser::kListElementFieldNumber;
const int State_Browser::kButtonFirstStateFieldNumber;
const int State_Browser::kButtonSecondStateFieldNumber;
const int State_Browser::kButtonThirdStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

State_Browser::State_Browser()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Lighthouse.State.State.Browser)
}

void State_Browser::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

State_Browser::State_Browser(const State_Browser& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Lighthouse.State.State.Browser)
}

void State_Browser::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  _buttonfirststate_ = false;
  _buttonsecondstate_ = false;
  _buttonthirdstate_ = false;
}

State_Browser::~State_Browser() {
  // @@protoc_insertion_point(destructor:Lighthouse.State.State.Browser)
  SharedDtor();
}

void State_Browser::SharedDtor() {
  if (this != default_instance_) {
  }
}

void State_Browser::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* State_Browser::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return State_Browser_descriptor_;
}

const State_Browser& State_Browser::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LighthouseState_2eproto();
  return *default_instance_;
}

State_Browser* State_Browser::default_instance_ = NULL;

State_Browser* State_Browser::New(::google::protobuf::Arena* arena) const {
  State_Browser* n = new State_Browser;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void State_Browser::Clear() {
// @@protoc_insertion_point(message_clear_start:Lighthouse.State.State.Browser)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(State_Browser, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<State_Browser*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(_buttonfirststate_, _buttonthirdstate_);

#undef ZR_HELPER_
#undef ZR_

  _listelement_.Clear();
}

bool State_Browser::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Lighthouse.State.State.Browser)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Lighthouse.CodeElement.CodeElement _listElement = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop__listElement:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add__listelement()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop__listElement;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(16)) goto parse__buttonFirstState;
        break;
      }

      // optional bool _buttonFirstState = 2;
      case 2: {
        if (tag == 16) {
         parse__buttonFirstState:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &_buttonfirststate_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse__buttonSecondState;
        break;
      }

      // optional bool _buttonSecondState = 3;
      case 3: {
        if (tag == 24) {
         parse__buttonSecondState:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &_buttonsecondstate_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse__buttonThirdState;
        break;
      }

      // optional bool _buttonThirdState = 4;
      case 4: {
        if (tag == 32) {
         parse__buttonThirdState:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &_buttonthirdstate_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Lighthouse.State.State.Browser)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Lighthouse.State.State.Browser)
  return false;
#undef DO_
}

void State_Browser::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Lighthouse.State.State.Browser)
  // repeated .Lighthouse.CodeElement.CodeElement _listElement = 1;
  for (unsigned int i = 0, n = this->_listelement_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_listelement(i), output);
  }

  // optional bool _buttonFirstState = 2;
  if (this->_buttonfirststate() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->_buttonfirststate(), output);
  }

  // optional bool _buttonSecondState = 3;
  if (this->_buttonsecondstate() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->_buttonsecondstate(), output);
  }

  // optional bool _buttonThirdState = 4;
  if (this->_buttonthirdstate() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->_buttonthirdstate(), output);
  }

  // @@protoc_insertion_point(serialize_end:Lighthouse.State.State.Browser)
}

::google::protobuf::uint8* State_Browser::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Lighthouse.State.State.Browser)
  // repeated .Lighthouse.CodeElement.CodeElement _listElement = 1;
  for (unsigned int i = 0, n = this->_listelement_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->_listelement(i), false, target);
  }

  // optional bool _buttonFirstState = 2;
  if (this->_buttonfirststate() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->_buttonfirststate(), target);
  }

  // optional bool _buttonSecondState = 3;
  if (this->_buttonsecondstate() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->_buttonsecondstate(), target);
  }

  // optional bool _buttonThirdState = 4;
  if (this->_buttonthirdstate() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->_buttonthirdstate(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Lighthouse.State.State.Browser)
  return target;
}

int State_Browser::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:Lighthouse.State.State.Browser)
  int total_size = 0;

  // optional bool _buttonFirstState = 2;
  if (this->_buttonfirststate() != 0) {
    total_size += 1 + 1;
  }

  // optional bool _buttonSecondState = 3;
  if (this->_buttonsecondstate() != 0) {
    total_size += 1 + 1;
  }

  // optional bool _buttonThirdState = 4;
  if (this->_buttonthirdstate() != 0) {
    total_size += 1 + 1;
  }

  // repeated .Lighthouse.CodeElement.CodeElement _listElement = 1;
  total_size += 1 * this->_listelement_size();
  for (int i = 0; i < this->_listelement_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->_listelement(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void State_Browser::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Lighthouse.State.State.Browser)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const State_Browser* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const State_Browser>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Lighthouse.State.State.Browser)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Lighthouse.State.State.Browser)
    MergeFrom(*source);
  }
}

void State_Browser::MergeFrom(const State_Browser& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Lighthouse.State.State.Browser)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  _listelement_.MergeFrom(from._listelement_);
  if (from._buttonfirststate() != 0) {
    set__buttonfirststate(from._buttonfirststate());
  }
  if (from._buttonsecondstate() != 0) {
    set__buttonsecondstate(from._buttonsecondstate());
  }
  if (from._buttonthirdstate() != 0) {
    set__buttonthirdstate(from._buttonthirdstate());
  }
}

void State_Browser::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Lighthouse.State.State.Browser)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void State_Browser::CopyFrom(const State_Browser& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Lighthouse.State.State.Browser)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool State_Browser::IsInitialized() const {

  return true;
}

void State_Browser::Swap(State_Browser* other) {
  if (other == this) return;
  InternalSwap(other);
}
void State_Browser::InternalSwap(State_Browser* other) {
  _listelement_.UnsafeArenaSwap(&other->_listelement_);
  std::swap(_buttonfirststate_, other->_buttonfirststate_);
  std::swap(_buttonsecondstate_, other->_buttonsecondstate_);
  std::swap(_buttonthirdstate_, other->_buttonthirdstate_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata State_Browser::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = State_Browser_descriptor_;
  metadata.reflection = State_Browser_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int State::kFirstFieldNumber;
const int State::kSecondFieldNumber;
const int State::kThirdFieldNumber;
const int State::kFourthFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

State::State()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Lighthouse.State.State)
}

void State::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  _first_ = const_cast< ::Lighthouse::State::State_Browser*>(&::Lighthouse::State::State_Browser::default_instance());
  _second_ = const_cast< ::Lighthouse::State::State_Browser*>(&::Lighthouse::State::State_Browser::default_instance());
  _third_ = const_cast< ::Lighthouse::State::State_Browser*>(&::Lighthouse::State::State_Browser::default_instance());
  _fourth_ = const_cast< ::Lighthouse::State::State_Browser*>(&::Lighthouse::State::State_Browser::default_instance());
}

State::State(const State& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Lighthouse.State.State)
}

void State::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  _first_ = NULL;
  _second_ = NULL;
  _third_ = NULL;
  _fourth_ = NULL;
}

State::~State() {
  // @@protoc_insertion_point(destructor:Lighthouse.State.State)
  SharedDtor();
}

void State::SharedDtor() {
  if (this != default_instance_) {
    delete _first_;
    delete _second_;
    delete _third_;
    delete _fourth_;
  }
}

void State::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* State::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return State_descriptor_;
}

const State& State::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LighthouseState_2eproto();
  return *default_instance_;
}

State* State::default_instance_ = NULL;

State* State::New(::google::protobuf::Arena* arena) const {
  State* n = new State;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void State::Clear() {
// @@protoc_insertion_point(message_clear_start:Lighthouse.State.State)
  if (GetArenaNoVirtual() == NULL && _first_ != NULL) delete _first_;
  _first_ = NULL;
  if (GetArenaNoVirtual() == NULL && _second_ != NULL) delete _second_;
  _second_ = NULL;
  if (GetArenaNoVirtual() == NULL && _third_ != NULL) delete _third_;
  _third_ = NULL;
  if (GetArenaNoVirtual() == NULL && _fourth_ != NULL) delete _fourth_;
  _fourth_ = NULL;
}

bool State::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Lighthouse.State.State)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Lighthouse.State.State.Browser _first = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__first()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse__second;
        break;
      }

      // optional .Lighthouse.State.State.Browser _second = 2;
      case 2: {
        if (tag == 18) {
         parse__second:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__second()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse__third;
        break;
      }

      // optional .Lighthouse.State.State.Browser _third = 3;
      case 3: {
        if (tag == 26) {
         parse__third:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__third()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse__fourth;
        break;
      }

      // optional .Lighthouse.State.State.Browser _fourth = 4;
      case 4: {
        if (tag == 34) {
         parse__fourth:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__fourth()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Lighthouse.State.State)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Lighthouse.State.State)
  return false;
#undef DO_
}

void State::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Lighthouse.State.State)
  // optional .Lighthouse.State.State.Browser _first = 1;
  if (this->has__first()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->_first_, output);
  }

  // optional .Lighthouse.State.State.Browser _second = 2;
  if (this->has__second()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->_second_, output);
  }

  // optional .Lighthouse.State.State.Browser _third = 3;
  if (this->has__third()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->_third_, output);
  }

  // optional .Lighthouse.State.State.Browser _fourth = 4;
  if (this->has__fourth()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->_fourth_, output);
  }

  // @@protoc_insertion_point(serialize_end:Lighthouse.State.State)
}

::google::protobuf::uint8* State::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Lighthouse.State.State)
  // optional .Lighthouse.State.State.Browser _first = 1;
  if (this->has__first()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->_first_, false, target);
  }

  // optional .Lighthouse.State.State.Browser _second = 2;
  if (this->has__second()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->_second_, false, target);
  }

  // optional .Lighthouse.State.State.Browser _third = 3;
  if (this->has__third()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->_third_, false, target);
  }

  // optional .Lighthouse.State.State.Browser _fourth = 4;
  if (this->has__fourth()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->_fourth_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Lighthouse.State.State)
  return target;
}

int State::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:Lighthouse.State.State)
  int total_size = 0;

  // optional .Lighthouse.State.State.Browser _first = 1;
  if (this->has__first()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->_first_);
  }

  // optional .Lighthouse.State.State.Browser _second = 2;
  if (this->has__second()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->_second_);
  }

  // optional .Lighthouse.State.State.Browser _third = 3;
  if (this->has__third()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->_third_);
  }

  // optional .Lighthouse.State.State.Browser _fourth = 4;
  if (this->has__fourth()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->_fourth_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void State::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Lighthouse.State.State)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const State* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const State>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Lighthouse.State.State)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Lighthouse.State.State)
    MergeFrom(*source);
  }
}

void State::MergeFrom(const State& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Lighthouse.State.State)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.has__first()) {
    mutable__first()->::Lighthouse::State::State_Browser::MergeFrom(from._first());
  }
  if (from.has__second()) {
    mutable__second()->::Lighthouse::State::State_Browser::MergeFrom(from._second());
  }
  if (from.has__third()) {
    mutable__third()->::Lighthouse::State::State_Browser::MergeFrom(from._third());
  }
  if (from.has__fourth()) {
    mutable__fourth()->::Lighthouse::State::State_Browser::MergeFrom(from._fourth());
  }
}

void State::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Lighthouse.State.State)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void State::CopyFrom(const State& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Lighthouse.State.State)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool State::IsInitialized() const {

  return true;
}

void State::Swap(State* other) {
  if (other == this) return;
  InternalSwap(other);
}
void State::InternalSwap(State* other) {
  std::swap(_first_, other->_first_);
  std::swap(_second_, other->_second_);
  std::swap(_third_, other->_third_);
  std::swap(_fourth_, other->_fourth_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata State::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = State_descriptor_;
  metadata.reflection = State_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// State_Browser

// repeated .Lighthouse.CodeElement.CodeElement _listElement = 1;
int State_Browser::_listelement_size() const {
  return _listelement_.size();
}
void State_Browser::clear__listelement() {
  _listelement_.Clear();
}
const ::Lighthouse::CodeElement::CodeElement& State_Browser::_listelement(int index) const {
  // @@protoc_insertion_point(field_get:Lighthouse.State.State.Browser._listElement)
  return _listelement_.Get(index);
}
::Lighthouse::CodeElement::CodeElement* State_Browser::mutable__listelement(int index) {
  // @@protoc_insertion_point(field_mutable:Lighthouse.State.State.Browser._listElement)
  return _listelement_.Mutable(index);
}
::Lighthouse::CodeElement::CodeElement* State_Browser::add__listelement() {
  // @@protoc_insertion_point(field_add:Lighthouse.State.State.Browser._listElement)
  return _listelement_.Add();
}
::google::protobuf::RepeatedPtrField< ::Lighthouse::CodeElement::CodeElement >*
State_Browser::mutable__listelement() {
  // @@protoc_insertion_point(field_mutable_list:Lighthouse.State.State.Browser._listElement)
  return &_listelement_;
}
const ::google::protobuf::RepeatedPtrField< ::Lighthouse::CodeElement::CodeElement >&
State_Browser::_listelement() const {
  // @@protoc_insertion_point(field_list:Lighthouse.State.State.Browser._listElement)
  return _listelement_;
}

// optional bool _buttonFirstState = 2;
void State_Browser::clear__buttonfirststate() {
  _buttonfirststate_ = false;
}
 bool State_Browser::_buttonfirststate() const {
  // @@protoc_insertion_point(field_get:Lighthouse.State.State.Browser._buttonFirstState)
  return _buttonfirststate_;
}
 void State_Browser::set__buttonfirststate(bool value) {
  
  _buttonfirststate_ = value;
  // @@protoc_insertion_point(field_set:Lighthouse.State.State.Browser._buttonFirstState)
}

// optional bool _buttonSecondState = 3;
void State_Browser::clear__buttonsecondstate() {
  _buttonsecondstate_ = false;
}
 bool State_Browser::_buttonsecondstate() const {
  // @@protoc_insertion_point(field_get:Lighthouse.State.State.Browser._buttonSecondState)
  return _buttonsecondstate_;
}
 void State_Browser::set__buttonsecondstate(bool value) {
  
  _buttonsecondstate_ = value;
  // @@protoc_insertion_point(field_set:Lighthouse.State.State.Browser._buttonSecondState)
}

// optional bool _buttonThirdState = 4;
void State_Browser::clear__buttonthirdstate() {
  _buttonthirdstate_ = false;
}
 bool State_Browser::_buttonthirdstate() const {
  // @@protoc_insertion_point(field_get:Lighthouse.State.State.Browser._buttonThirdState)
  return _buttonthirdstate_;
}
 void State_Browser::set__buttonthirdstate(bool value) {
  
  _buttonthirdstate_ = value;
  // @@protoc_insertion_point(field_set:Lighthouse.State.State.Browser._buttonThirdState)
}

// -------------------------------------------------------------------

// State

// optional .Lighthouse.State.State.Browser _first = 1;
bool State::has__first() const {
  return !_is_default_instance_ && _first_ != NULL;
}
void State::clear__first() {
  if (GetArenaNoVirtual() == NULL && _first_ != NULL) delete _first_;
  _first_ = NULL;
}
const ::Lighthouse::State::State_Browser& State::_first() const {
  // @@protoc_insertion_point(field_get:Lighthouse.State.State._first)
  return _first_ != NULL ? *_first_ : *default_instance_->_first_;
}
::Lighthouse::State::State_Browser* State::mutable__first() {
  
  if (_first_ == NULL) {
    _first_ = new ::Lighthouse::State::State_Browser;
  }
  // @@protoc_insertion_point(field_mutable:Lighthouse.State.State._first)
  return _first_;
}
::Lighthouse::State::State_Browser* State::release__first() {
  // @@protoc_insertion_point(field_release:Lighthouse.State.State._first)
  
  ::Lighthouse::State::State_Browser* temp = _first_;
  _first_ = NULL;
  return temp;
}
void State::set_allocated__first(::Lighthouse::State::State_Browser* _first) {
  delete _first_;
  _first_ = _first;
  if (_first) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Lighthouse.State.State._first)
}

// optional .Lighthouse.State.State.Browser _second = 2;
bool State::has__second() const {
  return !_is_default_instance_ && _second_ != NULL;
}
void State::clear__second() {
  if (GetArenaNoVirtual() == NULL && _second_ != NULL) delete _second_;
  _second_ = NULL;
}
const ::Lighthouse::State::State_Browser& State::_second() const {
  // @@protoc_insertion_point(field_get:Lighthouse.State.State._second)
  return _second_ != NULL ? *_second_ : *default_instance_->_second_;
}
::Lighthouse::State::State_Browser* State::mutable__second() {
  
  if (_second_ == NULL) {
    _second_ = new ::Lighthouse::State::State_Browser;
  }
  // @@protoc_insertion_point(field_mutable:Lighthouse.State.State._second)
  return _second_;
}
::Lighthouse::State::State_Browser* State::release__second() {
  // @@protoc_insertion_point(field_release:Lighthouse.State.State._second)
  
  ::Lighthouse::State::State_Browser* temp = _second_;
  _second_ = NULL;
  return temp;
}
void State::set_allocated__second(::Lighthouse::State::State_Browser* _second) {
  delete _second_;
  _second_ = _second;
  if (_second) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Lighthouse.State.State._second)
}

// optional .Lighthouse.State.State.Browser _third = 3;
bool State::has__third() const {
  return !_is_default_instance_ && _third_ != NULL;
}
void State::clear__third() {
  if (GetArenaNoVirtual() == NULL && _third_ != NULL) delete _third_;
  _third_ = NULL;
}
const ::Lighthouse::State::State_Browser& State::_third() const {
  // @@protoc_insertion_point(field_get:Lighthouse.State.State._third)
  return _third_ != NULL ? *_third_ : *default_instance_->_third_;
}
::Lighthouse::State::State_Browser* State::mutable__third() {
  
  if (_third_ == NULL) {
    _third_ = new ::Lighthouse::State::State_Browser;
  }
  // @@protoc_insertion_point(field_mutable:Lighthouse.State.State._third)
  return _third_;
}
::Lighthouse::State::State_Browser* State::release__third() {
  // @@protoc_insertion_point(field_release:Lighthouse.State.State._third)
  
  ::Lighthouse::State::State_Browser* temp = _third_;
  _third_ = NULL;
  return temp;
}
void State::set_allocated__third(::Lighthouse::State::State_Browser* _third) {
  delete _third_;
  _third_ = _third;
  if (_third) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Lighthouse.State.State._third)
}

// optional .Lighthouse.State.State.Browser _fourth = 4;
bool State::has__fourth() const {
  return !_is_default_instance_ && _fourth_ != NULL;
}
void State::clear__fourth() {
  if (GetArenaNoVirtual() == NULL && _fourth_ != NULL) delete _fourth_;
  _fourth_ = NULL;
}
const ::Lighthouse::State::State_Browser& State::_fourth() const {
  // @@protoc_insertion_point(field_get:Lighthouse.State.State._fourth)
  return _fourth_ != NULL ? *_fourth_ : *default_instance_->_fourth_;
}
::Lighthouse::State::State_Browser* State::mutable__fourth() {
  
  if (_fourth_ == NULL) {
    _fourth_ = new ::Lighthouse::State::State_Browser;
  }
  // @@protoc_insertion_point(field_mutable:Lighthouse.State.State._fourth)
  return _fourth_;
}
::Lighthouse::State::State_Browser* State::release__fourth() {
  // @@protoc_insertion_point(field_release:Lighthouse.State.State._fourth)
  
  ::Lighthouse::State::State_Browser* temp = _fourth_;
  _fourth_ = NULL;
  return temp;
}
void State::set_allocated__fourth(::Lighthouse::State::State_Browser* _fourth) {
  delete _fourth_;
  _fourth_ = _fourth;
  if (_fourth) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Lighthouse.State.State._fourth)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace State
}  // namespace Lighthouse

// @@protoc_insertion_point(global_scope)
