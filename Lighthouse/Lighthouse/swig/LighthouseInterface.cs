//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.10
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class LighthouseInterface : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal LighthouseInterface(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(LighthouseInterface obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~LighthouseInterface() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          LighthousePINVOKE.delete_LighthouseInterface(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public LighthouseInterface() : this(LighthousePINVOKE.new_LighthouseInterface(), true) {
  }

  public void updateElement_mtx(string arg0) {
    LighthousePINVOKE.LighthouseInterface_updateElement_mtx(swigCPtr, arg0);
    if (LighthousePINVOKE.SWIGPendingException.Pending) throw LighthousePINVOKE.SWIGPendingException.Retrieve();
  }

  public bool firstBrowserDataPush(string arg0) {
    bool ret = LighthousePINVOKE.LighthouseInterface_firstBrowserDataPush(swigCPtr, arg0);
    if (LighthousePINVOKE.SWIGPendingException.Pending) throw LighthousePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public string firstBrowserDataPull() {
    string ret = LighthousePINVOKE.LighthouseInterface_firstBrowserDataPull(swigCPtr);
    return ret;
  }

  public bool secondBrowserDataPush(string arg0) {
    bool ret = LighthousePINVOKE.LighthouseInterface_secondBrowserDataPush(swigCPtr, arg0);
    if (LighthousePINVOKE.SWIGPendingException.Pending) throw LighthousePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public string secondBrowserDataPull_first() {
    string ret = LighthousePINVOKE.LighthouseInterface_secondBrowserDataPull_first(swigCPtr);
    return ret;
  }

  public string secondBrowserDataPull_second() {
    string ret = LighthousePINVOKE.LighthouseInterface_secondBrowserDataPull_second(swigCPtr);
    return ret;
  }

  public string secondBrowserMovePositionPull() {
    string ret = LighthousePINVOKE.LighthouseInterface_secondBrowserMovePositionPull(swigCPtr);
    return ret;
  }

}
