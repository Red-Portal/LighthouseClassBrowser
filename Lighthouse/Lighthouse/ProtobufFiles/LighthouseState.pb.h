// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: LighthouseState.proto

#ifndef PROTOBUF_LighthouseState_2eproto__INCLUDED
#define PROTOBUF_LighthouseState_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "LighthouseCodeElement.pb.h"
// @@protoc_insertion_point(includes)

namespace Lighthouse {
namespace State {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_LighthouseState_2eproto();
void protobuf_AssignDesc_LighthouseState_2eproto();
void protobuf_ShutdownFile_LighthouseState_2eproto();

class State;
class State_Browser;

// ===================================================================

class State_Browser : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Lighthouse.State.State.Browser) */ {
 public:
  State_Browser();
  virtual ~State_Browser();

  State_Browser(const State_Browser& from);

  inline State_Browser& operator=(const State_Browser& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const State_Browser& default_instance();

  void Swap(State_Browser* other);

  // implements Message ----------------------------------------------

  inline State_Browser* New() const { return New(NULL); }

  State_Browser* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const State_Browser& from);
  void MergeFrom(const State_Browser& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(State_Browser* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Lighthouse.CodeElement.CodeElement _listElement = 1;
  int _listelement_size() const;
  void clear__listelement();
  static const int kListElementFieldNumber = 1;
  const ::Lighthouse::CodeElement::CodeElement& _listelement(int index) const;
  ::Lighthouse::CodeElement::CodeElement* mutable__listelement(int index);
  ::Lighthouse::CodeElement::CodeElement* add__listelement();
  ::google::protobuf::RepeatedPtrField< ::Lighthouse::CodeElement::CodeElement >*
      mutable__listelement();
  const ::google::protobuf::RepeatedPtrField< ::Lighthouse::CodeElement::CodeElement >&
      _listelement() const;

  // optional bool _buttonFirstState = 2;
  void clear__buttonfirststate();
  static const int kButtonFirstStateFieldNumber = 2;
  bool _buttonfirststate() const;
  void set__buttonfirststate(bool value);

  // optional bool _buttonSecondState = 3;
  void clear__buttonsecondstate();
  static const int kButtonSecondStateFieldNumber = 3;
  bool _buttonsecondstate() const;
  void set__buttonsecondstate(bool value);

  // optional bool _buttonThirdState = 4;
  void clear__buttonthirdstate();
  static const int kButtonThirdStateFieldNumber = 4;
  bool _buttonthirdstate() const;
  void set__buttonthirdstate(bool value);

  // @@protoc_insertion_point(class_scope:Lighthouse.State.State.Browser)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::Lighthouse::CodeElement::CodeElement > _listelement_;
  bool _buttonfirststate_;
  bool _buttonsecondstate_;
  bool _buttonthirdstate_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_LighthouseState_2eproto();
  friend void protobuf_AssignDesc_LighthouseState_2eproto();
  friend void protobuf_ShutdownFile_LighthouseState_2eproto();

  void InitAsDefaultInstance();
  static State_Browser* default_instance_;
};
// -------------------------------------------------------------------

class State : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Lighthouse.State.State) */ {
 public:
  State();
  virtual ~State();

  State(const State& from);

  inline State& operator=(const State& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const State& default_instance();

  void Swap(State* other);

  // implements Message ----------------------------------------------

  inline State* New() const { return New(NULL); }

  State* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const State& from);
  void MergeFrom(const State& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(State* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef State_Browser Browser;

  // accessors -------------------------------------------------------

  // optional .Lighthouse.State.State.Browser _first = 1;
  bool has__first() const;
  void clear__first();
  static const int kFirstFieldNumber = 1;
  const ::Lighthouse::State::State_Browser& _first() const;
  ::Lighthouse::State::State_Browser* mutable__first();
  ::Lighthouse::State::State_Browser* release__first();
  void set_allocated__first(::Lighthouse::State::State_Browser* _first);

  // optional .Lighthouse.State.State.Browser _second = 2;
  bool has__second() const;
  void clear__second();
  static const int kSecondFieldNumber = 2;
  const ::Lighthouse::State::State_Browser& _second() const;
  ::Lighthouse::State::State_Browser* mutable__second();
  ::Lighthouse::State::State_Browser* release__second();
  void set_allocated__second(::Lighthouse::State::State_Browser* _second);

  // optional .Lighthouse.State.State.Browser _third = 3;
  bool has__third() const;
  void clear__third();
  static const int kThirdFieldNumber = 3;
  const ::Lighthouse::State::State_Browser& _third() const;
  ::Lighthouse::State::State_Browser* mutable__third();
  ::Lighthouse::State::State_Browser* release__third();
  void set_allocated__third(::Lighthouse::State::State_Browser* _third);

  // optional .Lighthouse.State.State.Browser _fourth = 4;
  bool has__fourth() const;
  void clear__fourth();
  static const int kFourthFieldNumber = 4;
  const ::Lighthouse::State::State_Browser& _fourth() const;
  ::Lighthouse::State::State_Browser* mutable__fourth();
  ::Lighthouse::State::State_Browser* release__fourth();
  void set_allocated__fourth(::Lighthouse::State::State_Browser* _fourth);

  // @@protoc_insertion_point(class_scope:Lighthouse.State.State)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::Lighthouse::State::State_Browser* _first_;
  ::Lighthouse::State::State_Browser* _second_;
  ::Lighthouse::State::State_Browser* _third_;
  ::Lighthouse::State::State_Browser* _fourth_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_LighthouseState_2eproto();
  friend void protobuf_AssignDesc_LighthouseState_2eproto();
  friend void protobuf_ShutdownFile_LighthouseState_2eproto();

  void InitAsDefaultInstance();
  static State* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// State_Browser

// repeated .Lighthouse.CodeElement.CodeElement _listElement = 1;
inline int State_Browser::_listelement_size() const {
  return _listelement_.size();
}
inline void State_Browser::clear__listelement() {
  _listelement_.Clear();
}
inline const ::Lighthouse::CodeElement::CodeElement& State_Browser::_listelement(int index) const {
  // @@protoc_insertion_point(field_get:Lighthouse.State.State.Browser._listElement)
  return _listelement_.Get(index);
}
inline ::Lighthouse::CodeElement::CodeElement* State_Browser::mutable__listelement(int index) {
  // @@protoc_insertion_point(field_mutable:Lighthouse.State.State.Browser._listElement)
  return _listelement_.Mutable(index);
}
inline ::Lighthouse::CodeElement::CodeElement* State_Browser::add__listelement() {
  // @@protoc_insertion_point(field_add:Lighthouse.State.State.Browser._listElement)
  return _listelement_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::Lighthouse::CodeElement::CodeElement >*
State_Browser::mutable__listelement() {
  // @@protoc_insertion_point(field_mutable_list:Lighthouse.State.State.Browser._listElement)
  return &_listelement_;
}
inline const ::google::protobuf::RepeatedPtrField< ::Lighthouse::CodeElement::CodeElement >&
State_Browser::_listelement() const {
  // @@protoc_insertion_point(field_list:Lighthouse.State.State.Browser._listElement)
  return _listelement_;
}

// optional bool _buttonFirstState = 2;
inline void State_Browser::clear__buttonfirststate() {
  _buttonfirststate_ = false;
}
inline bool State_Browser::_buttonfirststate() const {
  // @@protoc_insertion_point(field_get:Lighthouse.State.State.Browser._buttonFirstState)
  return _buttonfirststate_;
}
inline void State_Browser::set__buttonfirststate(bool value) {
  
  _buttonfirststate_ = value;
  // @@protoc_insertion_point(field_set:Lighthouse.State.State.Browser._buttonFirstState)
}

// optional bool _buttonSecondState = 3;
inline void State_Browser::clear__buttonsecondstate() {
  _buttonsecondstate_ = false;
}
inline bool State_Browser::_buttonsecondstate() const {
  // @@protoc_insertion_point(field_get:Lighthouse.State.State.Browser._buttonSecondState)
  return _buttonsecondstate_;
}
inline void State_Browser::set__buttonsecondstate(bool value) {
  
  _buttonsecondstate_ = value;
  // @@protoc_insertion_point(field_set:Lighthouse.State.State.Browser._buttonSecondState)
}

// optional bool _buttonThirdState = 4;
inline void State_Browser::clear__buttonthirdstate() {
  _buttonthirdstate_ = false;
}
inline bool State_Browser::_buttonthirdstate() const {
  // @@protoc_insertion_point(field_get:Lighthouse.State.State.Browser._buttonThirdState)
  return _buttonthirdstate_;
}
inline void State_Browser::set__buttonthirdstate(bool value) {
  
  _buttonthirdstate_ = value;
  // @@protoc_insertion_point(field_set:Lighthouse.State.State.Browser._buttonThirdState)
}

// -------------------------------------------------------------------

// State

// optional .Lighthouse.State.State.Browser _first = 1;
inline bool State::has__first() const {
  return !_is_default_instance_ && _first_ != NULL;
}
inline void State::clear__first() {
  if (GetArenaNoVirtual() == NULL && _first_ != NULL) delete _first_;
  _first_ = NULL;
}
inline const ::Lighthouse::State::State_Browser& State::_first() const {
  // @@protoc_insertion_point(field_get:Lighthouse.State.State._first)
  return _first_ != NULL ? *_first_ : *default_instance_->_first_;
}
inline ::Lighthouse::State::State_Browser* State::mutable__first() {
  
  if (_first_ == NULL) {
    _first_ = new ::Lighthouse::State::State_Browser;
  }
  // @@protoc_insertion_point(field_mutable:Lighthouse.State.State._first)
  return _first_;
}
inline ::Lighthouse::State::State_Browser* State::release__first() {
  // @@protoc_insertion_point(field_release:Lighthouse.State.State._first)
  
  ::Lighthouse::State::State_Browser* temp = _first_;
  _first_ = NULL;
  return temp;
}
inline void State::set_allocated__first(::Lighthouse::State::State_Browser* _first) {
  delete _first_;
  _first_ = _first;
  if (_first) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Lighthouse.State.State._first)
}

// optional .Lighthouse.State.State.Browser _second = 2;
inline bool State::has__second() const {
  return !_is_default_instance_ && _second_ != NULL;
}
inline void State::clear__second() {
  if (GetArenaNoVirtual() == NULL && _second_ != NULL) delete _second_;
  _second_ = NULL;
}
inline const ::Lighthouse::State::State_Browser& State::_second() const {
  // @@protoc_insertion_point(field_get:Lighthouse.State.State._second)
  return _second_ != NULL ? *_second_ : *default_instance_->_second_;
}
inline ::Lighthouse::State::State_Browser* State::mutable__second() {
  
  if (_second_ == NULL) {
    _second_ = new ::Lighthouse::State::State_Browser;
  }
  // @@protoc_insertion_point(field_mutable:Lighthouse.State.State._second)
  return _second_;
}
inline ::Lighthouse::State::State_Browser* State::release__second() {
  // @@protoc_insertion_point(field_release:Lighthouse.State.State._second)
  
  ::Lighthouse::State::State_Browser* temp = _second_;
  _second_ = NULL;
  return temp;
}
inline void State::set_allocated__second(::Lighthouse::State::State_Browser* _second) {
  delete _second_;
  _second_ = _second;
  if (_second) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Lighthouse.State.State._second)
}

// optional .Lighthouse.State.State.Browser _third = 3;
inline bool State::has__third() const {
  return !_is_default_instance_ && _third_ != NULL;
}
inline void State::clear__third() {
  if (GetArenaNoVirtual() == NULL && _third_ != NULL) delete _third_;
  _third_ = NULL;
}
inline const ::Lighthouse::State::State_Browser& State::_third() const {
  // @@protoc_insertion_point(field_get:Lighthouse.State.State._third)
  return _third_ != NULL ? *_third_ : *default_instance_->_third_;
}
inline ::Lighthouse::State::State_Browser* State::mutable__third() {
  
  if (_third_ == NULL) {
    _third_ = new ::Lighthouse::State::State_Browser;
  }
  // @@protoc_insertion_point(field_mutable:Lighthouse.State.State._third)
  return _third_;
}
inline ::Lighthouse::State::State_Browser* State::release__third() {
  // @@protoc_insertion_point(field_release:Lighthouse.State.State._third)
  
  ::Lighthouse::State::State_Browser* temp = _third_;
  _third_ = NULL;
  return temp;
}
inline void State::set_allocated__third(::Lighthouse::State::State_Browser* _third) {
  delete _third_;
  _third_ = _third;
  if (_third) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Lighthouse.State.State._third)
}

// optional .Lighthouse.State.State.Browser _fourth = 4;
inline bool State::has__fourth() const {
  return !_is_default_instance_ && _fourth_ != NULL;
}
inline void State::clear__fourth() {
  if (GetArenaNoVirtual() == NULL && _fourth_ != NULL) delete _fourth_;
  _fourth_ = NULL;
}
inline const ::Lighthouse::State::State_Browser& State::_fourth() const {
  // @@protoc_insertion_point(field_get:Lighthouse.State.State._fourth)
  return _fourth_ != NULL ? *_fourth_ : *default_instance_->_fourth_;
}
inline ::Lighthouse::State::State_Browser* State::mutable__fourth() {
  
  if (_fourth_ == NULL) {
    _fourth_ = new ::Lighthouse::State::State_Browser;
  }
  // @@protoc_insertion_point(field_mutable:Lighthouse.State.State._fourth)
  return _fourth_;
}
inline ::Lighthouse::State::State_Browser* State::release__fourth() {
  // @@protoc_insertion_point(field_release:Lighthouse.State.State._fourth)
  
  ::Lighthouse::State::State_Browser* temp = _fourth_;
  _fourth_ = NULL;
  return temp;
}
inline void State::set_allocated__fourth(::Lighthouse::State::State_Browser* _fourth) {
  delete _fourth_;
  _fourth_ = _fourth;
  if (_fourth) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Lighthouse.State.State._fourth)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace State
}  // namespace Lighthouse

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_LighthouseState_2eproto__INCLUDED
