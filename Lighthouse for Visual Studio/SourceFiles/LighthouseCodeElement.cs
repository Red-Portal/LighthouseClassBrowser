// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: LighthouseCodeElement.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Lighthouse.CodeElement {

  /// <summary>Holder for reflection information generated from LighthouseCodeElement.proto</summary>
  public static partial class LighthouseCodeElementReflection {

    #region Descriptor
    /// <summary>File descriptor for LighthouseCodeElement.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static LighthouseCodeElementReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChtMaWdodGhvdXNlQ29kZUVsZW1lbnQucHJvdG8SFkxpZ2h0aG91c2UuQ29k",
            "ZUVsZW1lbnQiwgIKC0NvZGVFbGVtZW50Eg0KBV9uYW1lGAEgASgJEg4KBl9k",
            "YXRhMRgCIAEoDBIOCgZfZGF0YTIYAyABKAwSPgoFX1R5cGUYBCABKA4yLy5M",
            "aWdodGhvdXNlLkNvZGVFbGVtZW50LkNvZGVFbGVtZW50LkVsZW1lbnRUeXBl",
            "EhMKC19pc0Fic3RyYWN0GAYgASgIEhEKCV9pc1N0YXRpYxgHIAEoCBIzCgZf",
            "Y2hpbGQYCCADKAsyIy5MaWdodGhvdXNlLkNvZGVFbGVtZW50LkNvZGVFbGVt",
            "ZW50ImcKC0VsZW1lbnRUeXBlEgcKA1RPUBAAEg0KCU5BTUVTUEFDRRABEgkK",
            "BUNMQVNTEAISCgoGTUVNQkVSEAMSCgoGTUVUSE9EEAQSDgoKQ09MTEVDVElP",
            "ThAFEg0KCUVYQ0VQVElPThAGYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Lighthouse.CodeElement.CodeElement), global::Lighthouse.CodeElement.CodeElement.Parser, new[]{ "Name", "Data1", "Data2", "Type", "IsAbstract", "IsStatic", "Child" }, null, new[]{ typeof(global::Lighthouse.CodeElement.CodeElement.Types.ElementType) }, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class CodeElement : pb::IMessage<CodeElement> {
    private static readonly pb::MessageParser<CodeElement> _parser = new pb::MessageParser<CodeElement>(() => new CodeElement());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CodeElement> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lighthouse.CodeElement.LighthouseCodeElementReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CodeElement() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CodeElement(CodeElement other) : this() {
      Name_ = other.Name_;
      Data1_ = other.Data1_;
      Data2_ = other.Data2_;
      Type_ = other.Type_;
      IsAbstract_ = other.IsAbstract_;
      IsStatic_ = other.IsStatic_;
      Child_ = other.Child_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CodeElement Clone() {
      return new CodeElement(this);
    }

    /// <summary>Field number for the "_name" field.</summary>
    public const int NameFieldNumber = 1;
    private string Name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return Name_; }
      set {
        Name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "_data1" field.</summary>
    public const int Data1FieldNumber = 2;
    private pb::ByteString Data1_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Data1 {
      get { return Data1_; }
      set {
        Data1_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "_data2" field.</summary>
    public const int Data2FieldNumber = 3;
    private pb::ByteString Data2_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Data2 {
      get { return Data2_; }
      set {
        Data2_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "_Type" field.</summary>
    public const int TypeFieldNumber = 4;
    private global::Lighthouse.CodeElement.CodeElement.Types.ElementType Type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Lighthouse.CodeElement.CodeElement.Types.ElementType Type {
      get { return Type_; }
      set {
        Type_ = value;
      }
    }

    /// <summary>Field number for the "_isAbstract" field.</summary>
    public const int IsAbstractFieldNumber = 6;
    private bool IsAbstract_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsAbstract {
      get { return IsAbstract_; }
      set {
        IsAbstract_ = value;
      }
    }

    /// <summary>Field number for the "_isStatic" field.</summary>
    public const int IsStaticFieldNumber = 7;
    private bool IsStatic_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsStatic {
      get { return IsStatic_; }
      set {
        IsStatic_ = value;
      }
    }

    /// <summary>Field number for the "_child" field.</summary>
    public const int ChildFieldNumber = 8;
    private static readonly pb::FieldCodec<global::Lighthouse.CodeElement.CodeElement> _repeated_Child_codec
        = pb::FieldCodec.ForMessage(66, global::Lighthouse.CodeElement.CodeElement.Parser);
    private readonly pbc::RepeatedField<global::Lighthouse.CodeElement.CodeElement> Child_ = new pbc::RepeatedField<global::Lighthouse.CodeElement.CodeElement>();
    /// <summary>
    /// code element's members
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Lighthouse.CodeElement.CodeElement> Child {
      get { return Child_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CodeElement);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CodeElement other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Data1 != other.Data1) return false;
      if (Data2 != other.Data2) return false;
      if (Type != other.Type) return false;
      if (IsAbstract != other.IsAbstract) return false;
      if (IsStatic != other.IsStatic) return false;
      if(!Child_.Equals(other.Child_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Data1.Length != 0) hash ^= Data1.GetHashCode();
      if (Data2.Length != 0) hash ^= Data2.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (IsAbstract != false) hash ^= IsAbstract.GetHashCode();
      if (IsStatic != false) hash ^= IsStatic.GetHashCode();
      hash ^= Child_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (Data1.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Data1);
      }
      if (Data2.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(Data2);
      }
      if (Type != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) Type);
      }
      if (IsAbstract != false) {
        output.WriteRawTag(48);
        output.WriteBool(IsAbstract);
      }
      if (IsStatic != false) {
        output.WriteRawTag(56);
        output.WriteBool(IsStatic);
      }
      Child_.WriteTo(output, _repeated_Child_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Data1.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Data1);
      }
      if (Data2.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Data2);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (IsAbstract != false) {
        size += 1 + 1;
      }
      if (IsStatic != false) {
        size += 1 + 1;
      }
      size += Child_.CalculateSize(_repeated_Child_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CodeElement other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Data1.Length != 0) {
        Data1 = other.Data1;
      }
      if (other.Data2.Length != 0) {
        Data2 = other.Data2;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.IsAbstract != false) {
        IsAbstract = other.IsAbstract;
      }
      if (other.IsStatic != false) {
        IsStatic = other.IsStatic;
      }
      Child_.Add(other.Child_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            Data1 = input.ReadBytes();
            break;
          }
          case 26: {
            Data2 = input.ReadBytes();
            break;
          }
          case 32: {
            Type_ = (global::Lighthouse.CodeElement.CodeElement.Types.ElementType) input.ReadEnum();
            break;
          }
          case 48: {
            IsAbstract = input.ReadBool();
            break;
          }
          case 56: {
            IsStatic = input.ReadBool();
            break;
          }
          case 66: {
            Child_.AddEntriesFrom(input, _repeated_Child_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the CodeElement message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum ElementType {
        [pbr::OriginalName("TOP")] Top = 0,
        /// <summary>
        /// TOP types are the hierarchy element right above classes
        /// such as packages for Java, Sourcefiles for C#
        /// </summary>
        [pbr::OriginalName("NAMESPACE")] Namespace = 1,
        [pbr::OriginalName("CLASS")] Class = 2,
        /// <summary>
        /// interface or abstract classes are all considered as classes
        /// </summary>
        [pbr::OriginalName("MEMBER")] Member = 3,
        [pbr::OriginalName("METHOD")] Method = 4,
        [pbr::OriginalName("COLLECTION")] Collection = 5,
        [pbr::OriginalName("EXCEPTION")] Exception = 6,
      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
